{
    "docs": [
        {
            "location": "/",
            "text": "H\u1ecfi \u0111\u00e1p Python\n\n\nT\u1ed5ng h\u1ee3p nh\u1eefng c\u00e2u h\u1ecfi k\u1ef9 thu\u1eadt hay \u0111\u01b0\u1ee3c h\u1ecfi v\u00e0 tr\u1ea3 l\u1eddi t\u1ea1i l\u1edbp h\u1ecdc Python\nhttps://pymi.vn\n\n\nT\u1ea1i sao khi c\u00f3 m\u1ed9t list A, sau \u0111\u00f3 g\u00e1n \nZ = A\n, r\u1ed3i thay \u0111\u1ed5i A th\u00ec Z thay \u0111\u1ed5i theo.\n\n\nA\n v\u00e0 \nZ\n l\u00e0 2 c\u00e1i t\u00ean cho c\u00f9ng 1 object. Khi thay \u0111\u1ed5i list A t\u1ee9c l\u00e0 thay \u0111\u1ed5i object m\u00e0 list Z c\u0169ng \u0111ang \"bu\u1ed9c\" v\u00e0o (bound).\n\n\nIn [1]: A = [1,2,3,4]\n\nIn [2]: Z = A\n\nIn [3]: A[0] = 3\n\nIn [4]: print(Z)\n[3, 2, 3, 4]\n\nIn [5]: id(A) == id(Z)\nOut[5]: True\n\nIn [6]: A is Z\nOut[6]: True\n\n\n\n\nXem chi ti\u1ebft \nc\u00e1ch name v\u00e0 binding ho\u1ea1t \u0111\u1ed9ng \u1edf \u0111\u00e2y\n.\n\n\nTrong Python3, print('abc') tr\u1ea3 v\u1ec1 (return) g\u00ec?\n\n\nNone\n.\n\n\nIn [8]: out = print(\"Hello PYMI.VN\")\nHello PYMI.VN\n\nIn [9]: out is None\nOut[9]: True\n\n\n\n\nT\u1ea1i sao sau \nif\n kh\u00f4ng c\u1ea7n d\u1ea5u \n(\n m\u00e0 len th\u00ec c\u1ea7n? \nlen()\n?\n\n\nlen\n l\u00e0 function (h\u00e0m), \nif\n l\u00e0 statement (c\u00e2u l\u1ec7nh) t\u01b0\u01a1ng t\u1ef1 v\u1edbi for/while/with/try.\n\n\nT\u1ea1i sao \n0.1 + 0.1 + 0.1 != 0.3\n?\n\n\nKi\u1ec3u d\u1eef li\u1ec7u float (0.1, 0.3) l\u00e0 m\u1ed9t d\u1ea1ng bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang c\u1ee7a gi\u00e1 tr\u1ecb\ns\u1ed1 ph\u1ee9c (c\u00f3 gi\u00e1 tr\u1ecb n\u00f3 bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c \u0111\u01b0\u1ee3c, c\u00f3 gi\u00e1 tr\u1ecb th\u00ec kh\u00f4ng).\nKhi ba s\u1ed1 0.1 (bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang) c\u1ed9ng l\u1ea1i v\u1edbi nhau,\ngi\u00e1 tr\u1ecb n\u00f3 t\u1ea1o ra s\u1ebd kh\u00e1c v\u1edbi 0.3 (bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c).\nXem chi ti\u1ebft \u1edf \n\u0111\u00e2y\n\n\nT\u1ea1i sao \n1e2 == 10**2\n m\u00e0 \n1e69 != 10**69\n?\n\n\nFloat l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u \nbi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang\n:\n\n\nIn [6]: 1e69 == 10**69\nOut[6]: False\n\nIn [7]: int(1e69)\nOut[7]: 1000000000000000072531436381529235126158374409646521955518210155479040\n\n\n\n\nT\u1ea1i sao trong m\u1ed9t l\u1ea7n ch\u1ea1y id(-5) kh\u00f4ng \u0111\u1ed5i c\u00f2n id(-6) th\u00ec l\u1ea1i thay \u0111\u1ed5i?\n\n\nCPython\n l\u01b0u s\u1eb5n \n(cache) gi\u00e1 tr\u1ecb c\u00e1c\ns\u1ed1 t\u1eeb -5 \u0111\u1ebfn 256\n.\nV\u00ec v\u1eady Python s\u1ebd kh\u00f4ng t\u1ea1o\nra m\u1ed9t object m\u1edbi m\u1ed7i l\u1ea7n d\u00f9ng s\u1ed1 trong kho\u1ea3ng n\u00e0y. \u0110\u00e2y l\u00e0 t\u00ednh ch\u1ea5t c\u00f3 \u0111\u01b0\u1ee3c\ndo c\u00e1ch t\u1ea1o ra b\u1ea3n CPython,\nkh\u00f4ng ph\u1ea3i m\u1ed9t t\u00ednh n\u0103ng c\u1ee7a Python (kh\u00f4ng \u0111\u00fang v\u1edbi Jython, PyPy...).\nKhi so s\u00e1nh c\u00e1c s\u1ed1, h\u00e3y d\u00f9ng \n==\n ch\u1ee9 \u0111\u1eebng d\u00f9ng \nis\n.\n\n\nn [3]: id(-5)\nOut[3]: 4546887872\n\nIn [4]: id(-5)\nOut[4]: 4546887872\n\nIn [5]: id(-6)\nOut[5]: 4569471920\n\nIn [6]: id(-6)\nOut[6]: 4569469616\n\n\n\n\nC\u00e1c argument \u0111\u01b0\u1ee3c pass v\u00e0o function d\u00f9ng tham chi\u1ebfu hay tham tr\u1ecb?\n\n\nPython d\u00f9ng \ncall-by-object-reference\n\n\nM\u00f4 t\u1ea3 function overloading trong Python\n\n\nPython kh\u00f4ng ph\u1ea3i l\u00e0 C++! Python kh\u00f4ng c\u1ea7n v\u00e0 kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m\noverloading.\nPython l\u00e0 dynamic typing, theo style\n\nduck-typing\n,\nkhi c\u1ea7n g\u1ecdi function v\u1edbi c\u00e1c argument kh\u00e1c nhau/s\u1ed1 l\u01b0\u1ee3ng tu\u1ef3 \u00fd, s\u1eed d\u1ee5ng\n\n*args, **kwargs\n\n\nM\u00f4 t\u1ea3 interface v\u00e0 abstract trong Python\n\n\nPython kh\u00f4ng ph\u1ea3i l\u00e0 Java! Python kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m interface, hay abstract\nclass nh\u01b0 Java. N\u1ebfu mu\u1ed1n, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n cung c\u1ea5p\nc\u00e1c t\u00ednh n\u0103ng n\u00e0y nh\u01b0 \nABC\n.",
            "title": "Home"
        },
        {
            "location": "/#hoi-ap-python",
            "text": "T\u1ed5ng h\u1ee3p nh\u1eefng c\u00e2u h\u1ecfi k\u1ef9 thu\u1eadt hay \u0111\u01b0\u1ee3c h\u1ecfi v\u00e0 tr\u1ea3 l\u1eddi t\u1ea1i l\u1edbp h\u1ecdc Python\nhttps://pymi.vn",
            "title": "H\u1ecfi \u0111\u00e1p Python"
        },
        {
            "location": "/#tai-sao-khi-co-mot-list-a-sau-o-gan-z-a-roi-thay-oi-a-thi-z-thay-oi-theo",
            "text": "A  v\u00e0  Z  l\u00e0 2 c\u00e1i t\u00ean cho c\u00f9ng 1 object. Khi thay \u0111\u1ed5i list A t\u1ee9c l\u00e0 thay \u0111\u1ed5i object m\u00e0 list Z c\u0169ng \u0111ang \"bu\u1ed9c\" v\u00e0o (bound).  In [1]: A = [1,2,3,4]\n\nIn [2]: Z = A\n\nIn [3]: A[0] = 3\n\nIn [4]: print(Z)\n[3, 2, 3, 4]\n\nIn [5]: id(A) == id(Z)\nOut[5]: True\n\nIn [6]: A is Z\nOut[6]: True  Xem chi ti\u1ebft  c\u00e1ch name v\u00e0 binding ho\u1ea1t \u0111\u1ed9ng \u1edf \u0111\u00e2y .",
            "title": "T\u1ea1i sao khi c\u00f3 m\u1ed9t list A, sau \u0111\u00f3 g\u00e1n Z = A, r\u1ed3i thay \u0111\u1ed5i A th\u00ec Z thay \u0111\u1ed5i theo."
        },
        {
            "location": "/#trong-python3-printabc-tra-ve-return-gi",
            "text": "None .  In [8]: out = print(\"Hello PYMI.VN\")\nHello PYMI.VN\n\nIn [9]: out is None\nOut[9]: True",
            "title": "Trong Python3, print('abc') tr\u1ea3 v\u1ec1 (return) g\u00ec?"
        },
        {
            "location": "/#tai-sao-sau-if-khong-can-dau-ma-len-thi-can-len",
            "text": "len  l\u00e0 function (h\u00e0m),  if  l\u00e0 statement (c\u00e2u l\u1ec7nh) t\u01b0\u01a1ng t\u1ef1 v\u1edbi for/while/with/try.",
            "title": "T\u1ea1i sao sau if kh\u00f4ng c\u1ea7n d\u1ea5u ( m\u00e0 len th\u00ec c\u1ea7n? len()?"
        },
        {
            "location": "/#tai-sao-01-01-01-03",
            "text": "Ki\u1ec3u d\u1eef li\u1ec7u float (0.1, 0.3) l\u00e0 m\u1ed9t d\u1ea1ng bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang c\u1ee7a gi\u00e1 tr\u1ecb\ns\u1ed1 ph\u1ee9c (c\u00f3 gi\u00e1 tr\u1ecb n\u00f3 bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c \u0111\u01b0\u1ee3c, c\u00f3 gi\u00e1 tr\u1ecb th\u00ec kh\u00f4ng).\nKhi ba s\u1ed1 0.1 (bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang) c\u1ed9ng l\u1ea1i v\u1edbi nhau,\ngi\u00e1 tr\u1ecb n\u00f3 t\u1ea1o ra s\u1ebd kh\u00e1c v\u1edbi 0.3 (bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c).\nXem chi ti\u1ebft \u1edf  \u0111\u00e2y",
            "title": "T\u1ea1i sao 0.1 + 0.1 + 0.1 != 0.3?"
        },
        {
            "location": "/#tai-sao-1e2-102-ma-1e69-1069",
            "text": "Float l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u  bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang :  In [6]: 1e69 == 10**69\nOut[6]: False\n\nIn [7]: int(1e69)\nOut[7]: 1000000000000000072531436381529235126158374409646521955518210155479040",
            "title": "T\u1ea1i sao 1e2 == 10**2 m\u00e0 1e69 != 10**69?"
        },
        {
            "location": "/#tai-sao-trong-mot-lan-chay-id-5-khong-oi-con-id-6-thi-lai-thay-oi",
            "text": "CPython  l\u01b0u s\u1eb5n  (cache) gi\u00e1 tr\u1ecb c\u00e1c\ns\u1ed1 t\u1eeb -5 \u0111\u1ebfn 256 .\nV\u00ec v\u1eady Python s\u1ebd kh\u00f4ng t\u1ea1o\nra m\u1ed9t object m\u1edbi m\u1ed7i l\u1ea7n d\u00f9ng s\u1ed1 trong kho\u1ea3ng n\u00e0y. \u0110\u00e2y l\u00e0 t\u00ednh ch\u1ea5t c\u00f3 \u0111\u01b0\u1ee3c\ndo c\u00e1ch t\u1ea1o ra b\u1ea3n CPython,\nkh\u00f4ng ph\u1ea3i m\u1ed9t t\u00ednh n\u0103ng c\u1ee7a Python (kh\u00f4ng \u0111\u00fang v\u1edbi Jython, PyPy...).\nKhi so s\u00e1nh c\u00e1c s\u1ed1, h\u00e3y d\u00f9ng  ==  ch\u1ee9 \u0111\u1eebng d\u00f9ng  is .  n [3]: id(-5)\nOut[3]: 4546887872\n\nIn [4]: id(-5)\nOut[4]: 4546887872\n\nIn [5]: id(-6)\nOut[5]: 4569471920\n\nIn [6]: id(-6)\nOut[6]: 4569469616",
            "title": "T\u1ea1i sao trong m\u1ed9t l\u1ea7n ch\u1ea1y id(-5) kh\u00f4ng \u0111\u1ed5i c\u00f2n id(-6) th\u00ec l\u1ea1i thay \u0111\u1ed5i?"
        },
        {
            "location": "/#cac-argument-uoc-pass-vao-function-dung-tham-chieu-hay-tham-tri",
            "text": "Python d\u00f9ng  call-by-object-reference",
            "title": "C\u00e1c argument \u0111\u01b0\u1ee3c pass v\u00e0o function d\u00f9ng tham chi\u1ebfu hay tham tr\u1ecb?"
        },
        {
            "location": "/#mo-ta-function-overloading-trong-python",
            "text": "Python kh\u00f4ng ph\u1ea3i l\u00e0 C++! Python kh\u00f4ng c\u1ea7n v\u00e0 kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m\noverloading.\nPython l\u00e0 dynamic typing, theo style duck-typing ,\nkhi c\u1ea7n g\u1ecdi function v\u1edbi c\u00e1c argument kh\u00e1c nhau/s\u1ed1 l\u01b0\u1ee3ng tu\u1ef3 \u00fd, s\u1eed d\u1ee5ng *args, **kwargs",
            "title": "M\u00f4 t\u1ea3 function overloading trong Python"
        },
        {
            "location": "/#mo-ta-interface-va-abstract-trong-python",
            "text": "Python kh\u00f4ng ph\u1ea3i l\u00e0 Java! Python kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m interface, hay abstract\nclass nh\u01b0 Java. N\u1ebfu mu\u1ed1n, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n cung c\u1ea5p\nc\u00e1c t\u00ednh n\u0103ng n\u00e0y nh\u01b0  ABC .",
            "title": "M\u00f4 t\u1ea3 interface v\u00e0 abstract trong Python"
        }
    ]
}