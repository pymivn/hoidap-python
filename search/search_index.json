{
    "docs": [
        {
            "location": "/", 
            "text": "H\u1ecfi \u0111\u00e1p Python\n\n\nT\u1ed5ng h\u1ee3p nh\u1eefng c\u00e2u h\u1ecfi k\u1ef9 thu\u1eadt hay \u0111\u01b0\u1ee3c h\u1ecfi v\u00e0 tr\u1ea3 l\u1eddi t\u1ea1i l\u1edbp \nh\u1ecdc Python PyMIvn\n,\nc\u00f9ng c\u00e1c c\u00e2u h\u1ecfi ph\u1ecfng v\u1ea5n Python th\u01b0\u1eddng g\u1eb7p \ud83d\ude0f\n\n\nT\u1ea1i sao khi c\u00f3 m\u1ed9t list A, sau \u0111\u00f3 g\u00e1n \nZ = A\n, r\u1ed3i thay \u0111\u1ed5i A th\u00ec Z thay \u0111\u1ed5i theo.\n\n\nA\n v\u00e0 \nZ\n l\u00e0 2 c\u00e1i t\u00ean cho c\u00f9ng 1 object. Khi thay \u0111\u1ed5i list A t\u1ee9c l\u00e0 thay \u0111\u1ed5i object m\u00e0 list Z c\u0169ng \u0111ang \"bu\u1ed9c\" v\u00e0o (bound).\n\n\nIn [1]: A = [1,2,3,4]\n\nIn [2]: Z = A\n\nIn [3]: A[0] = 3\n\nIn [4]: print(Z)\n[3, 2, 3, 4]\n\nIn [5]: id(A) == id(Z)\nOut[5]: True\n\nIn [6]: A is Z\nOut[6]: True\n\n\n\n\nXem chi ti\u1ebft \nc\u00e1ch name v\u00e0 binding ho\u1ea1t \u0111\u1ed9ng \u1edf \u0111\u00e2y\n.\n\n\nTrong Python3, print('abc') tr\u1ea3 v\u1ec1 (return) g\u00ec?\n\n\nNone\n.\n\n\nIn [8]: out = print(\nHello PYMI.VN\n)\nHello PYMI.VN\n\nIn [9]: out is None\nOut[9]: True\n\n\n\n\nT\u1ea1i sao sau \nif\n kh\u00f4ng c\u1ea7n d\u1ea5u \n(\n m\u00e0 len th\u00ec c\u1ea7n? \nlen()\n?\n\n\nlen\n l\u00e0 function (h\u00e0m), \nif\n l\u00e0 statement (c\u00e2u l\u1ec7nh) t\u01b0\u01a1ng t\u1ef1 v\u1edbi for/while/with/try.\n\n\nT\u1ea1i sao \n0.1 + 0.1 + 0.1 != 0.3\n?\n\n\nKi\u1ec3u d\u1eef li\u1ec7u float (0.1, 0.3) l\u00e0 m\u1ed9t d\u1ea1ng bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang c\u1ee7a gi\u00e1 tr\u1ecb\ns\u1ed1 th\u1ef1c (c\u00f3 gi\u00e1 tr\u1ecb n\u00f3 bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c \u0111\u01b0\u1ee3c, c\u00f3 gi\u00e1 tr\u1ecb th\u00ec kh\u00f4ng).\nKhi ba s\u1ed1 0.1 (bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang) c\u1ed9ng l\u1ea1i v\u1edbi nhau,\ngi\u00e1 tr\u1ecb n\u00f3 t\u1ea1o ra s\u1ebd kh\u00e1c v\u1edbi 0.3 (bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c).\nXem chi ti\u1ebft \u1edf \n\u0111\u00e2y\n\n\nT\u1ea1i sao \n1e2 == 10**2\n m\u00e0 \n1e69 != 10**69\n?\n\n\nFloat l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u \nbi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang\n:\n\n\nIn [6]: 1e69 == 10**69\nOut[6]: False\n\nIn [7]: int(1e69)\nOut[7]: 1000000000000000072531436381529235126158374409646521955518210155479040\n\n\n\n\nT\u1ea1i sao trong m\u1ed9t l\u1ea7n ch\u1ea1y id(-5) kh\u00f4ng \u0111\u1ed5i c\u00f2n id(-6) th\u00ec l\u1ea1i thay \u0111\u1ed5i?\n\n\nCPython\n l\u01b0u s\u1eb5n \n(cache) gi\u00e1 tr\u1ecb c\u00e1c\ns\u1ed1 t\u1eeb -5 \u0111\u1ebfn 256\n.\nV\u00ec v\u1eady Python s\u1ebd kh\u00f4ng t\u1ea1o\nra m\u1ed9t object m\u1edbi m\u1ed7i l\u1ea7n d\u00f9ng s\u1ed1 trong kho\u1ea3ng n\u00e0y. \u0110\u00e2y l\u00e0 t\u00ednh ch\u1ea5t c\u00f3 \u0111\u01b0\u1ee3c\ndo c\u00e1ch t\u1ea1o ra b\u1ea3n CPython,\nkh\u00f4ng ph\u1ea3i m\u1ed9t t\u00ednh n\u0103ng c\u1ee7a Python (kh\u00f4ng \u0111\u00fang v\u1edbi Jython, PyPy...).\nKhi so s\u00e1nh c\u00e1c s\u1ed1, h\u00e3y d\u00f9ng \n==\n ch\u1ee9 \u0111\u1eebng d\u00f9ng \nis\n.\n\n\nn [3]: id(-5)\nOut[3]: 4546887872\n\nIn [4]: id(-5)\nOut[4]: 4546887872\n\nIn [5]: id(-6)\nOut[5]: 4569471920\n\nIn [6]: id(-6)\nOut[6]: 4569469616\n\n\n\n\nC\u00e1c key trong dict c\u00f3 th\u1ee9 t\u1ef1 th\u1ebf n\u00e0o?\n\n\nV\u1edbi Python2.7 -\n Python3.5. N\u1ebfu ta vi\u1ebft code sau th\u00ec k\u1ebft qu\u1ea3 l\u00e0 g\u00ec\n\n\nfor k in {1: 1, 2: 2, 1000: 1000, 8:8}:\n     print(k)\n\n\n\n\nC\u00e1c key c\u1ee7a dictionary kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 c\u1ee5 th\u1ec3. Nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 ng\u1eabu nhi\u00ean (t\u1ee9c \u0111o\u1ea1n code tr\u00ean, n\u1ebfu tr\u00ean 1 m\u00e1y t\u00ednh, ch\u1ea1y 100 l\u1ea7n \u0111\u1ec1u ra k\u1ebft qu\u1ea3 nh\u01b0 nhau - nh\u01b0ng tr\u00ean m\u00e1y kh\u00e1c c\u00f3 th\u1ec3 kh\u00e1c).\n\n\nBonus: Python3.6 s\u1ebd ghi nh\u1edb c\u00e1c key theo th\u1ee9 t\u1ef1 ch\u00fang \u0111\u01b0\u1ee3c add v\u00e0o dictionary.\n\n\nM\u1ed9t tuple ch\u1ee9a 2 ph\u1ea7n t\u1eed l\u00e0 2 list c\u00f3 th\u1ec3 l\u00e0 key c\u1ee7a dict kh\u00f4ng?\n\n\nTuple v\u1ed1n l\u00e0 \"immutable\", \u0111\u00e3 t\u1ea1o ra th\u00ec kh\u00f4ng thay \u0111\u1ed5i \u0111\u01b0\u1ee3c, nh\u01b0ng ph\u1ea7n t\u1eed c\u1ee7a n\u00f3 l\u00e0 list, c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c -\n tuple n\u00e0y tr\u1edf th\u00e0nh mutable theo \u00fd ngh\u0129a: ta thay \u0111\u1ed5i \u0111\u01b0\u1ee3c tuple \u0111\u00f3 ch\u01b0a g\u00ec (m\u1eb7c d\u00f9 \u1edf m\u1ed9t c\u00e2u s\u00e2u h\u01a1n, kh\u00f4ng ph\u1ea3i thay \u0111\u1ed5i tr\u1ef1c ti\u1ebfp). \u0110i\u1ec1u n\u00e0y khi\u1ebfn gi\u00e1 tr\u1ecb c\u1ee7a tuple kh\u00f4ng c\u1ed1 \u0111\u1ecbnh -\n kh\u00f4ng l\u1ea5y \u0111\u01b0\u1ee3c \"hash\" -\n kh\u00f4ng l\u00e0m key c\u1ee7a dict \u0111\u01b0\u1ee3c.\n\n\nT\u1ea1o tuple ch\u1ee9a 1 ph\u1ea7n t\u1eed l\u00e0 string 'Python'\n\n\nKh\u00f4ng ph\u1ea3i l\u00e0 \n('Python')\n, m\u00e0 ph\u1ea3i c\u00f3 d\u1ea5u ph\u1ea9y sau n\u00f3 \u0111\u1ec3 Python hi\u1ec3u \u0111\u00e2y l\u00e0 tuple \n('Python',)\n\n\nC\u00e1c argument \u0111\u01b0\u1ee3c pass v\u00e0o function d\u00f9ng tham chi\u1ebfu hay tham tr\u1ecb?\n\n\nPython d\u00f9ng \ncall-by-object-reference\n\n\nM\u00f4 t\u1ea3 function overloading trong Python\n\n\nPython kh\u00f4ng ph\u1ea3i l\u00e0 C++! Python kh\u00f4ng c\u1ea7n v\u00e0 kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m\noverloading.\nPython l\u00e0 dynamic typing, theo style\n\nduck-typing\n,\nkhi c\u1ea7n g\u1ecdi function v\u1edbi c\u00e1c argument kh\u00e1c nhau/s\u1ed1 l\u01b0\u1ee3ng tu\u1ef3 \u00fd, s\u1eed d\u1ee5ng\n\n*args, **kwargs\n\n\nM\u00f4 t\u1ea3 interface v\u00e0 abstract trong Python\n\n\nPython kh\u00f4ng ph\u1ea3i l\u00e0 Java! Python kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m interface, hay abstract\nclass nh\u01b0 Java. N\u1ebfu mu\u1ed1n, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n cung c\u1ea5p\nc\u00e1c t\u00ednh n\u0103ng n\u00e0y nh\u01b0 \nABC\n.", 
            "title": "H\u1ecfi \u0111\u00e1p Python"
        }, 
        {
            "location": "/#hoi-ap-python", 
            "text": "T\u1ed5ng h\u1ee3p nh\u1eefng c\u00e2u h\u1ecfi k\u1ef9 thu\u1eadt hay \u0111\u01b0\u1ee3c h\u1ecfi v\u00e0 tr\u1ea3 l\u1eddi t\u1ea1i l\u1edbp  h\u1ecdc Python PyMIvn ,\nc\u00f9ng c\u00e1c c\u00e2u h\u1ecfi ph\u1ecfng v\u1ea5n Python th\u01b0\u1eddng g\u1eb7p \ud83d\ude0f", 
            "title": "H\u1ecfi \u0111\u00e1p Python"
        }, 
        {
            "location": "/#tai-sao-khi-co-mot-list-a-sau-o-gan-z-a-roi-thay-oi-a-thi-z-thay-oi-theo", 
            "text": "A  v\u00e0  Z  l\u00e0 2 c\u00e1i t\u00ean cho c\u00f9ng 1 object. Khi thay \u0111\u1ed5i list A t\u1ee9c l\u00e0 thay \u0111\u1ed5i object m\u00e0 list Z c\u0169ng \u0111ang \"bu\u1ed9c\" v\u00e0o (bound).  In [1]: A = [1,2,3,4]\n\nIn [2]: Z = A\n\nIn [3]: A[0] = 3\n\nIn [4]: print(Z)\n[3, 2, 3, 4]\n\nIn [5]: id(A) == id(Z)\nOut[5]: True\n\nIn [6]: A is Z\nOut[6]: True  Xem chi ti\u1ebft  c\u00e1ch name v\u00e0 binding ho\u1ea1t \u0111\u1ed9ng \u1edf \u0111\u00e2y .", 
            "title": "T\u1ea1i sao khi c\u00f3 m\u1ed9t list A, sau \u0111\u00f3 g\u00e1n Z = A, r\u1ed3i thay \u0111\u1ed5i A th\u00ec Z thay \u0111\u1ed5i theo."
        }, 
        {
            "location": "/#trong-python3-printabc-tra-ve-return-gi", 
            "text": "None .  In [8]: out = print( Hello PYMI.VN )\nHello PYMI.VN\n\nIn [9]: out is None\nOut[9]: True", 
            "title": "Trong Python3, print('abc') tr\u1ea3 v\u1ec1 (return) g\u00ec?"
        }, 
        {
            "location": "/#tai-sao-sau-if-khong-can-dau-ma-len-thi-can-len", 
            "text": "len  l\u00e0 function (h\u00e0m),  if  l\u00e0 statement (c\u00e2u l\u1ec7nh) t\u01b0\u01a1ng t\u1ef1 v\u1edbi for/while/with/try.", 
            "title": "T\u1ea1i sao sau if kh\u00f4ng c\u1ea7n d\u1ea5u ( m\u00e0 len th\u00ec c\u1ea7n? len()?"
        }, 
        {
            "location": "/#tai-sao-01-01-01-03", 
            "text": "Ki\u1ec3u d\u1eef li\u1ec7u float (0.1, 0.3) l\u00e0 m\u1ed9t d\u1ea1ng bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang c\u1ee7a gi\u00e1 tr\u1ecb\ns\u1ed1 th\u1ef1c (c\u00f3 gi\u00e1 tr\u1ecb n\u00f3 bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c \u0111\u01b0\u1ee3c, c\u00f3 gi\u00e1 tr\u1ecb th\u00ec kh\u00f4ng).\nKhi ba s\u1ed1 0.1 (bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang) c\u1ed9ng l\u1ea1i v\u1edbi nhau,\ngi\u00e1 tr\u1ecb n\u00f3 t\u1ea1o ra s\u1ebd kh\u00e1c v\u1edbi 0.3 (bi\u1ec3u di\u1ec5n ch\u00ednh x\u00e1c).\nXem chi ti\u1ebft \u1edf  \u0111\u00e2y", 
            "title": "T\u1ea1i sao 0.1 + 0.1 + 0.1 != 0.3?"
        }, 
        {
            "location": "/#tai-sao-1e2-102-ma-1e69-1069", 
            "text": "Float l\u00e0 ki\u1ec3u d\u1eef li\u1ec7u  bi\u1ec3u di\u1ec5n g\u1ea7n \u0111\u00fang :  In [6]: 1e69 == 10**69\nOut[6]: False\n\nIn [7]: int(1e69)\nOut[7]: 1000000000000000072531436381529235126158374409646521955518210155479040", 
            "title": "T\u1ea1i sao 1e2 == 10**2 m\u00e0 1e69 != 10**69?"
        }, 
        {
            "location": "/#tai-sao-trong-mot-lan-chay-id-5-khong-oi-con-id-6-thi-lai-thay-oi", 
            "text": "CPython  l\u01b0u s\u1eb5n  (cache) gi\u00e1 tr\u1ecb c\u00e1c\ns\u1ed1 t\u1eeb -5 \u0111\u1ebfn 256 .\nV\u00ec v\u1eady Python s\u1ebd kh\u00f4ng t\u1ea1o\nra m\u1ed9t object m\u1edbi m\u1ed7i l\u1ea7n d\u00f9ng s\u1ed1 trong kho\u1ea3ng n\u00e0y. \u0110\u00e2y l\u00e0 t\u00ednh ch\u1ea5t c\u00f3 \u0111\u01b0\u1ee3c\ndo c\u00e1ch t\u1ea1o ra b\u1ea3n CPython,\nkh\u00f4ng ph\u1ea3i m\u1ed9t t\u00ednh n\u0103ng c\u1ee7a Python (kh\u00f4ng \u0111\u00fang v\u1edbi Jython, PyPy...).\nKhi so s\u00e1nh c\u00e1c s\u1ed1, h\u00e3y d\u00f9ng  ==  ch\u1ee9 \u0111\u1eebng d\u00f9ng  is .  n [3]: id(-5)\nOut[3]: 4546887872\n\nIn [4]: id(-5)\nOut[4]: 4546887872\n\nIn [5]: id(-6)\nOut[5]: 4569471920\n\nIn [6]: id(-6)\nOut[6]: 4569469616", 
            "title": "T\u1ea1i sao trong m\u1ed9t l\u1ea7n ch\u1ea1y id(-5) kh\u00f4ng \u0111\u1ed5i c\u00f2n id(-6) th\u00ec l\u1ea1i thay \u0111\u1ed5i?"
        }, 
        {
            "location": "/#cac-key-trong-dict-co-thu-tu-the-nao", 
            "text": "V\u1edbi Python2.7 -  Python3.5. N\u1ebfu ta vi\u1ebft code sau th\u00ec k\u1ebft qu\u1ea3 l\u00e0 g\u00ec  for k in {1: 1, 2: 2, 1000: 1000, 8:8}:\n     print(k)  C\u00e1c key c\u1ee7a dictionary kh\u00f4ng c\u00f3 th\u1ee9 t\u1ef1 c\u1ee5 th\u1ec3. Nh\u01b0ng kh\u00f4ng ph\u1ea3i l\u00e0 ng\u1eabu nhi\u00ean (t\u1ee9c \u0111o\u1ea1n code tr\u00ean, n\u1ebfu tr\u00ean 1 m\u00e1y t\u00ednh, ch\u1ea1y 100 l\u1ea7n \u0111\u1ec1u ra k\u1ebft qu\u1ea3 nh\u01b0 nhau - nh\u01b0ng tr\u00ean m\u00e1y kh\u00e1c c\u00f3 th\u1ec3 kh\u00e1c).  Bonus: Python3.6 s\u1ebd ghi nh\u1edb c\u00e1c key theo th\u1ee9 t\u1ef1 ch\u00fang \u0111\u01b0\u1ee3c add v\u00e0o dictionary.", 
            "title": "C\u00e1c key trong dict c\u00f3 th\u1ee9 t\u1ef1 th\u1ebf n\u00e0o?"
        }, 
        {
            "location": "/#mot-tuple-chua-2-phan-tu-la-2-list-co-the-la-key-cua-dict-khong", 
            "text": "Tuple v\u1ed1n l\u00e0 \"immutable\", \u0111\u00e3 t\u1ea1o ra th\u00ec kh\u00f4ng thay \u0111\u1ed5i \u0111\u01b0\u1ee3c, nh\u01b0ng ph\u1ea7n t\u1eed c\u1ee7a n\u00f3 l\u00e0 list, c\u00f3 th\u1ec3 thay \u0111\u1ed5i \u0111\u01b0\u1ee3c -  tuple n\u00e0y tr\u1edf th\u00e0nh mutable theo \u00fd ngh\u0129a: ta thay \u0111\u1ed5i \u0111\u01b0\u1ee3c tuple \u0111\u00f3 ch\u01b0a g\u00ec (m\u1eb7c d\u00f9 \u1edf m\u1ed9t c\u00e2u s\u00e2u h\u01a1n, kh\u00f4ng ph\u1ea3i thay \u0111\u1ed5i tr\u1ef1c ti\u1ebfp). \u0110i\u1ec1u n\u00e0y khi\u1ebfn gi\u00e1 tr\u1ecb c\u1ee7a tuple kh\u00f4ng c\u1ed1 \u0111\u1ecbnh -  kh\u00f4ng l\u1ea5y \u0111\u01b0\u1ee3c \"hash\" -  kh\u00f4ng l\u00e0m key c\u1ee7a dict \u0111\u01b0\u1ee3c.", 
            "title": "M\u1ed9t tuple ch\u1ee9a 2 ph\u1ea7n t\u1eed l\u00e0 2 list c\u00f3 th\u1ec3 l\u00e0 key c\u1ee7a dict kh\u00f4ng?"
        }, 
        {
            "location": "/#tao-tuple-chua-1-phan-tu-la-string-python", 
            "text": "Kh\u00f4ng ph\u1ea3i l\u00e0  ('Python') , m\u00e0 ph\u1ea3i c\u00f3 d\u1ea5u ph\u1ea9y sau n\u00f3 \u0111\u1ec3 Python hi\u1ec3u \u0111\u00e2y l\u00e0 tuple  ('Python',)", 
            "title": "T\u1ea1o tuple ch\u1ee9a 1 ph\u1ea7n t\u1eed l\u00e0 string 'Python'"
        }, 
        {
            "location": "/#cac-argument-uoc-pass-vao-function-dung-tham-chieu-hay-tham-tri", 
            "text": "Python d\u00f9ng  call-by-object-reference", 
            "title": "C\u00e1c argument \u0111\u01b0\u1ee3c pass v\u00e0o function d\u00f9ng tham chi\u1ebfu hay tham tr\u1ecb?"
        }, 
        {
            "location": "/#mo-ta-function-overloading-trong-python", 
            "text": "Python kh\u00f4ng ph\u1ea3i l\u00e0 C++! Python kh\u00f4ng c\u1ea7n v\u00e0 kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m\noverloading.\nPython l\u00e0 dynamic typing, theo style duck-typing ,\nkhi c\u1ea7n g\u1ecdi function v\u1edbi c\u00e1c argument kh\u00e1c nhau/s\u1ed1 l\u01b0\u1ee3ng tu\u1ef3 \u00fd, s\u1eed d\u1ee5ng *args, **kwargs", 
            "title": "M\u00f4 t\u1ea3 function overloading trong Python"
        }, 
        {
            "location": "/#mo-ta-interface-va-abstract-trong-python", 
            "text": "Python kh\u00f4ng ph\u1ea3i l\u00e0 Java! Python kh\u00f4ng c\u00f3 kh\u00e1i ni\u1ec7m interface, hay abstract\nclass nh\u01b0 Java. N\u1ebfu mu\u1ed1n, l\u1eadp tr\u00ecnh vi\u00ean c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c th\u01b0 vi\u1ec7n cung c\u1ea5p\nc\u00e1c t\u00ednh n\u0103ng n\u00e0y nh\u01b0  ABC .", 
            "title": "M\u00f4 t\u1ea3 interface v\u00e0 abstract trong Python"
        }, 
        {
            "location": "/interview_tests/", 
            "text": "Vi\u1ebft code t\u1ea1o 1 file text 10 GB, sau \u0111\u00f3 \u0111\u1ecdc file \u0111\u00f3 v\u00e0o in ra 10 d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a file.\n\n\nB\u00e0i t\u1eadp c\u1ee7a https://pymi.vn - nh\u1edb l\u00e0 10 GB kh\u00f4ng ph\u1ea3i 10 MB\n\n\nVi\u1ebft code t\u1ea1o 3000 file, m\u1ed7i file ch\u1ee9a 1 s\u1ed1 ng\u1eabu nhi\u00ean trong kho\u1ea3ng 0-1000. Sau \u0111\u00f3 \u0111\u1ecdc 3000 s\u1ed1 \u0111\u00f3 v\u00e0o v\u00e0 t\u00ednh t\u1ed5ng. Sau \u0111\u00f3 xo\u00e1 3000 file n\u00e0y \u0111i.\n\n\nB\u1ea1n c\u00f3 ch\u1eafc m\u00ecnh \u0111\u1ecdc \u0111\u01b0\u1ee3c 3000 file? H\u1ecdc vi\u00ean PyMI ch\u1eafc ch\u1eafn l\u00e0m \u0111\u01b0\u1ee3c.\n\n\nVi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh t\u00ednh t\u1ed5ng c\u00e1c s\u1ed1 \u0111\u1ea7u v\u00e0o:\n\n\npython filename.py 1 2 3 4.5\n\nin ra m\u00e0n h\u00ecnh 10.5\n\n\nVi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh in ra m\u00e0n h\u00ecnh t\u00ean c\u00e1c file MP3 trong 1 th\u01b0 m\u1ee5c\n\n\nN\u1ebfu b\u1ea1n kh\u00f4ng ki\u1ec3m tra \u0111\u01b0\u1ee3c file MP3 m\u00e0 kh\u00f4ng c\u00f3 \u0111u\u00f4i \n.mp3\n, b\u1ea1n ch\u1ec9 \u0111\u01b0\u1ee3c 50% s\u1ed1 \u0111i\u1ec3m!", 
            "title": "Interview tests"
        }, 
        {
            "location": "/interview_tests/#viet-code-tao-1-file-text-10-gb-sau-o-oc-file-o-vao-in-ra-10-dong-cuoi-cung-cua-file", 
            "text": "B\u00e0i t\u1eadp c\u1ee7a https://pymi.vn - nh\u1edb l\u00e0 10 GB kh\u00f4ng ph\u1ea3i 10 MB", 
            "title": "Vi\u1ebft code t\u1ea1o 1 file text 10 GB, sau \u0111\u00f3 \u0111\u1ecdc file \u0111\u00f3 v\u00e0o in ra 10 d\u00f2ng cu\u1ed1i c\u00f9ng c\u1ee7a file."
        }, 
        {
            "location": "/interview_tests/#viet-code-tao-3000-file-moi-file-chua-1-so-ngau-nhien-trong-khoang-0-1000-sau-o-oc-3000-so-o-vao-va-tinh-tong-sau-o-xoa-3000-file-nay-i", 
            "text": "B\u1ea1n c\u00f3 ch\u1eafc m\u00ecnh \u0111\u1ecdc \u0111\u01b0\u1ee3c 3000 file? H\u1ecdc vi\u00ean PyMI ch\u1eafc ch\u1eafn l\u00e0m \u0111\u01b0\u1ee3c.", 
            "title": "Vi\u1ebft code t\u1ea1o 3000 file, m\u1ed7i file ch\u1ee9a 1 s\u1ed1 ng\u1eabu nhi\u00ean trong kho\u1ea3ng 0-1000. Sau \u0111\u00f3 \u0111\u1ecdc 3000 s\u1ed1 \u0111\u00f3 v\u00e0o v\u00e0 t\u00ednh t\u1ed5ng. Sau \u0111\u00f3 xo\u00e1 3000 file n\u00e0y \u0111i."
        }, 
        {
            "location": "/interview_tests/#viet-chuong-trinh-tinh-tong-cac-so-au-vao", 
            "text": "python filename.py 1 2 3 4.5 \nin ra m\u00e0n h\u00ecnh 10.5", 
            "title": "Vi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh t\u00ednh t\u1ed5ng c\u00e1c s\u1ed1 \u0111\u1ea7u v\u00e0o:"
        }, 
        {
            "location": "/interview_tests/#viet-chuong-trinh-in-ra-man-hinh-ten-cac-file-mp3-trong-1-thu-muc", 
            "text": "N\u1ebfu b\u1ea1n kh\u00f4ng ki\u1ec3m tra \u0111\u01b0\u1ee3c file MP3 m\u00e0 kh\u00f4ng c\u00f3 \u0111u\u00f4i  .mp3 , b\u1ea1n ch\u1ec9 \u0111\u01b0\u1ee3c 50% s\u1ed1 \u0111i\u1ec3m!", 
            "title": "Vi\u1ebft ch\u01b0\u01a1ng tr\u00ecnh in ra m\u00e0n h\u00ecnh t\u00ean c\u00e1c file MP3 trong 1 th\u01b0 m\u1ee5c"
        }
    ]
}